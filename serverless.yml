service: ses2slack
frameworkVersion: "2"
plugins:
  - serverless-localstack
  - serverless-dotenv-plugin
  - serverless-cloudformation-changesets

custom:
  defaultStage: local
  localstack:
    debug: true
    autostart: true
    lambda:
      mountCode: true
    docker:
      sudo: false
    stages:
      - local
      - dev
    endpointFile: localstack_endpoints.json
  profile: slsfw-${self:provider.stage} # stageに応じたprofile名を指定
  awsRegionName: ${env:AWS_REGION_NAME}
  awsAccountId: ${env:AWS_ACCOUNT_ID}
  slackHookUrl: ${env:SLACK_WEB_HOOK_URL}
  s3MailBucketName: ses2slack-mail-${self:provider.stage}
  slackHookSecretName: ses2slack-hook-${self:provider.stage}
  environment:
    S3_MAIL_BUCKET_NAME: ${self:custom.s3MailBucketName}
    SLACK_WEB_HOOK_SECRET: ${self:custom.slackHookSecretName}
    AWS_REGION_NAME: ${self:custom.awsRegionName}

provider:
  name: aws
  runtime: nodejs12.x
  region: ${env:AWS_REGION_NAME}
  stage: ${opt:stage, self:custom.defaultStage} # 引数のstageを優先、なければデフォルト
  profile: ${self:custom.profile}
  lambdaHashingVersion: "20201221"
  apiGateway:
    shouldStartNameWithService: true
  environment: ${self:custom.environment}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:Get*
            - s3:List*
            - secretsmanager:Get*
          Resource: "*"

functions:
  execute:
    handler: handler.mailToSlack

resources:
  Resources:
    MailObjectBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3MailBucketName}
    MailObjectBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref MailObjectBucket
        PolicyDocument:
          Statement:
            - Action:
                - s3:PutObject
              Effect: "Allow"
              Principal:
                Service: "ses.amazonaws.com"
              Resource: !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref MailObjectBucket
                  - /*
              Condition:
                StringEquals:
                  "aws:Referer": ${opt:awsAccountId, self:custom.awsAccountId} # 引数のawsAccountIdを優先、なければenvから設定
    SlackHookSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:custom.slackHookSecretName}
        Description: "Slack Incoming Webhook URL"
        SecretString: !Sub '{ "slackHookUrl": "${opt:slackHookUrl, self:custom.slackHookUrl}" }' # 引数のslackHookUrlを優先、なければenvから設定
